#!/usr/bin/env node
var dotclock = require('../index')
var Clock = dotclock.Clock;
var fs = require('fs')
var path = require('path')
var clockDir = path.join(process.cwd(), '.clock')
var myTimeFile = path.join(clockDir, process.env.USER)
var cmd = process.argv[2] || 'status';
var clockDirExists = fs.existsSync(clockDir)
var myTimeFileExists = fs.existsSync(myTimeFile)

function die(msg) {
  console.error(msg)
  process.exit(0);
}

if (!clockDirExists && cmd !== 'in') {
  die('No .clock directory exists in current directory. `dotclock in` to create it and clock in at the same time.')
}

if (cmd === 'in') {
  if (clockDirExists) {
    clockIn()
  } else {
    createDatabase()
    clockIn()
  }
} else if (cmd === 'out') {
  clockOut()
} else {
  printStatus()
}

function createDatabase() {
  console.log('Creating', clockDir);
  fs.mkdirSync(clockDir);
}

function clockIn() {
  var clock = new Clock();
  if (myTimeFileExists) {
    // parse that json into mem
    clock.load(JSON.parse(fs.readFileSync(myTimeFile)))
  } else {
    // create new struct in mem
    clock.load({ sessions: [] })
  }
  if (clock.isOn()) {
    // throw if session already open
    die("You're already clocked in. You must first clock `out`");
  } else {
    // open a new session
    clock.openNewSession();
    // write back file as json
    clock.persistToPath(myTimeFile)
    console.log('Clocked in');
  }
}

function clockOut() {
  console.log('Clocking out');
  if (myTimeFileExists) {
    // parse that json into mem
  } else {
    // throw error saying you never clocked in
  }
  // close last session by updating keys "end" and "hours"
  // write back file as json
}

function printStatus() {
  console.log('Status');
  if (myTimeFileExists) {
    // parse that json into mem
  } else {
    // throw error saying you never clocked in
  }
  // print last session details
}
